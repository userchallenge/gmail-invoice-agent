from pydantic import Field, BaseModel
from atomic_agents import BaseIOSchema


class EmailCategorizationInputSchema(BaseIOSchema):
    """Input schema containing email data for the categorization agent to analyze."""
    
    email_id: str = Field(
        description="The unique identifier of the email to categorize"
    )
    sender: str = Field(
        description="The email address of the sender"
    )
    subject: str = Field(
        description="The subject line of the email"
    )
    body_clean: str = Field(
        description="The clean text content of the email body"
    )
    pdf_text: str = Field(
        default="",
        description="Text extracted from PDF attachments, if any"
    )


class EmailCategorizationOutputSchema(BaseIOSchema):
    """Output schema containing the categorization result and reasoning from the agent."""
    
    category: str = Field(
        description="The assigned category: 'information', 'action', or 'job_search'"
    )
    ai_reasoning: str = Field(
        description="The reasoning behind the categorization decision"
    )


class EmailSummaryInputSchema(BaseIOSchema):
    """Input schema containing email data for the summary agent to analyze."""
    
    email_id: str = Field(
        description="The unique identifier of the email to summarize"
    )
    sender: str = Field(
        description="The email address of the sender"
    )
    subject: str = Field(
        description="The subject line of the email"
    )
    body_clean: str = Field(
        description="The clean text content of the email body"
    )
    pdf_text: str = Field(
        default="",
        description="Text extracted from PDF attachments, if any"
    )


class EmailSummaryOutputSchema(BaseIOSchema):
    """This schema represents the summary analysis result generated by the email summary agent with key information."""
    
    email_summary: str = Field(
        description="Concise summary containing only key information from the email"
    )
    ai_reasoning: str = Field(
        description="The reasoning behind the summary analysis"
    )
    
    # Override the validation to prevent the dynamic model issue
    @classmethod
    def _validate_description(cls):
        # Skip validation for this specific case
        pass


class EmailTaskInputSchema(BaseIOSchema):
    """Input schema containing email data for the task agent to analyze."""
    
    email_id: str = Field(
        description="The unique identifier of the email to analyze for tasks"
    )
    sender: str = Field(
        description="The email address of the sender"
    )
    subject: str = Field(
        description="The subject line of the email"
    )
    body_clean: str = Field(
        description="The clean text content of the email body"
    )
    pdf_text: str = Field(
        default="",
        description="Text extracted from PDF attachments, if any"
    )


class EmailTaskOutputSchema(BaseIOSchema):
    """Output schema containing the task analysis result generated by the task agent."""
    
    action_required: str = Field(
        description="What specific action needs to be taken"
    )
    assigned_to: str = Field(
        description="Who should handle this task (e.g., 'recipient', 'finance team', 'project manager')"
    )
    due_date: str = Field(
        description="When this task is due (date string or 'Not specified' if no clear deadline)"
    )
    priority: str = Field(
        description="Task priority level: 'Low', 'Medium', or 'High'"
    )
    ai_reasoning: str = Field(
        description="The reasoning behind the task analysis"
    )
    
    # Override the validation to prevent the dynamic model issue
    @classmethod
    def _validate_description(cls):
        # Skip validation for this specific case
        pass


class ContentFormatterInputSchema(BaseIOSchema):
    """Input schema containing email summaries for professional content formatting."""
    
    summaries: list = Field(
        description="List of email summaries with metadata for categorization and formatting"
    )


class ContentFormatterOutputSchema(BaseIOSchema):
    """Output schema containing professionally formatted and categorized content."""
    
    formatted_content: str = Field(
        description="Professionally formatted content organized into logical categories"
    )
    
    # Override the validation to prevent the dynamic model issue
    @classmethod
    def _validate_description(cls):
        # Skip validation for this specific case
        pass