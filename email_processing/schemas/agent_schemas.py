from pydantic import Field, BaseModel
from atomic_agents import BaseIOSchema


class EmailCategorizationInputSchema(BaseIOSchema):
    """Input schema containing email data for the categorization agent to analyze."""
    
    email_id: str = Field(
        description="The unique identifier of the email to categorize"
    )
    sender: str = Field(
        description="The email address of the sender"
    )
    subject: str = Field(
        description="The subject line of the email"
    )
    body_clean: str = Field(
        description="The clean text content of the email body"
    )
    pdf_text: str = Field(
        default="",
        description="Text extracted from PDF attachments, if any"
    )


class EmailCategorizationOutputSchema(BaseIOSchema):
    """Output schema containing the categorization result and reasoning from the agent."""
    
    category: str = Field(
        description="The assigned category: either 'information' or 'action'"
    )
    ai_reasoning: str = Field(
        description="The reasoning behind the categorization decision"
    )


class EmailSummaryInputSchema(BaseIOSchema):
    """Input schema containing email data for the summary agent to analyze."""
    
    email_id: str = Field(
        description="The unique identifier of the email to summarize"
    )
    sender: str = Field(
        description="The email address of the sender"
    )
    subject: str = Field(
        description="The subject line of the email"
    )
    body_clean: str = Field(
        description="The clean text content of the email body"
    )
    pdf_text: str = Field(
        default="",
        description="Text extracted from PDF attachments, if any"
    )


class EmailSummaryOutputSchema(BaseIOSchema):
    """This schema represents the summary analysis result generated by the email summary agent, including purpose and value."""
    
    purpose: str = Field(
        description="The purpose of the email from the sender's perspective"
    )
    value_for_recipient: str = Field(
        description="What value this email provides for the recipient"
    )
    ai_reasoning: str = Field(
        description="The reasoning behind the summary analysis"
    )
    
    # Override the validation to prevent the dynamic model issue
    @classmethod
    def _validate_description(cls):
        # Skip validation for this specific case
        pass